% Manages a veiwport.
% A viewport looks into a screenbuffer and has a certain size with which to
% render the screenbuffer into.
% Viewports are sent keypresses, which are sent to textbuffers to update them,
% and then the screenbuffer is updated and lines redrawn.
(
	(platform v1)
	(platform ext)
	(var ViewportTopLeft "+")
	(var ViewportTopRight "+")
	(var ViewportTop "-")
	(var ViewportSide "|")
	(var ViewportBottomLeft "+")
	(var ViewportBottomRight "+")
	(var ViewportBottom "-")
	(var RenderBorder (get-def 'BORDER'))

	(var CurrentViewport 0)
	(var Viewports (list))

	(def read-lines #Viewport,Lines :: (
		(var Marker (dict-get Viewport marker))
		(var Lines (list))
	))

	(def viewport-new #StartX,StartY,EndX,EndY,Screenbuffer :: (
		(dict 
			(tuple startx StartX) 
			(tuple starty StartY) 
			(tuple endx EndX) 
			(tuple endy EndY) 
			(tuple screenbuffer Screenbuffer) 
			(tuple cursorLine 0) 
			(tuple cursorColumn 0)
		)
	))
	(def viewport-render #Viewport :: (
		(cursor-save)
		(var StartX (dict-get Viewport startx))
		(var EndX   (dict-get Viewport endx))
		(var StartY (dict-get Viewport starty))
		(var EndY   (dict-get Viewport endy))
		(var Length (- EndX StartX))
		(var Height (- EndY StartY))
		(var Output "")
		(if (== true RenderBorder) (
			(set Output (+ ViewportTopLeft (repeat ViewportTop (- Length 2)) ViewportTopRight))
		))
		(var RenderLine (scope #LineNo :: (
			% TODO: Get LineNo + cursorLine and grab (EndX-StartX) characters
			% TODO: Pad line numbers
			(+ LineNo (repeat " " (- Length 5)))
		)))
		(var BLeft (get ViewportSide))
		(var BRight (get ViewportSide))
		(if (== false RenderBorder) (
			(set BLeft "")
			(set BRight " ")
		))
		(each (seq 2 Height) (scope #LineNo :: (
			(set Output (+ Output "\n" BLeft (call RenderLine (- LineNo 1)) BRight))
		)))
		(if (== true RenderBorder) (
			(set Output (+ Output "\n" 
				ViewportBottomLeft 
				(repeat ViewportBottom (- Length 2)) 
				ViewportBottomRight)
			)
		))
		(cursor-move StartX StartY)
		(term-print Output)
		(cursor-restore)
	))

	(def viewports-render # :: (
		(each Viewports (scope #Viewport :: (
			(viewport-render Viewport)
		)))
	))
	(export-global viewport-new/5 viewports-render/0)

	% TODO: replace with a list
	(var Viewport nil)
	(def viewport_init # :: (
		(set Viewport (viewport-new 0 0 (term-cols) (- (term-rows) 2) nil))
		(push Viewports Viewport)
		(viewports-render)
	))
	(export-global viewport_init/0)

	(if (== true (get-def 'TEST')) (
		(import (+ (get-def "__dirname") "/../modules/modules"))
		(set Viewport (viewport-new 0 0 80 25 nil))
		(viewport-render Viewport)
		(exit)
	))
)
