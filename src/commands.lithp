%
% Implements commands that Livium accepts.
% Commands are those entered on the console, however keymapping allows
% commands to be used in VIEW mode to perform standard actions.
(
	(platform v1)
	(var CommandList nil)

	(import "switch")
	(import "src/commands/file")
	(import "src/commands/state")

	(def add-command #Name,Handler :: (
		(var CaseClause (case Name Handler))
		(set CommandList (++ CommandList (list CaseClause)))
	))
	(def print-error #Error :: (
		(term-print (+ "^r" Error "^:"))
	))
	(export-global add-command/2 print-error/1)

	(var RegexSplitCommand (regex "([A-Za-z]+)(?: (.*))?$"))
	(def handle-command #Command :: (
		(var Parts (match Command RegexSplitCommand))
		(if (!= (null) Parts) (
			(var CommandName (index Parts 1))
			(var Params (index Parts 2))
			(if (== (undefined) Params) (
				(set Params nil)
			))
			(call (switch CommandName CommandList) Params)
		) (else (
			(term-print "^r ^:")
			(cursor-restore)
		)))
		(viewport-cursor (current-viewport))
	))
	(export handle-command/1)

	(var UnknownCommand (scope #X :: (
		(print-error (+ "^rUnknown command: " X "^w"))
	)))

	(export-global print-error/1)

	(var CommandQuit # :: ((scope #Parameters :: (
		(term-fullscreen false)
		(term-print "Thanks for trying Livium!")
		(term-exit)
	))))

	(def commands-init (scope # :: (
		(set CommandList (list
			(default (scope #Given ::
				(scope # :: (call UnknownCommand Given))))
		))

		(add-command "quit" CommandQuit)
		(add-command "q" CommandQuit)

		(commands-file-init)
		(commands-state-init)
	)))
	(export-global commands-init/0)
)
