% Mode behaviour for Livium.
%
% Modes handled:
%  VIEW     View mode (move around, press : to enter command)
%  COMMAND  Command mode (brings up command entry)
(
	(platform ext)
	(import (+ (get-def "__dirname") "/commands"))
	(var CommandBuffer "")
	(var LastCommandLength 0)
	(def open_command # :: (
		(set CurrentMode 'COMMAND')
		(cursor-save)
		(cursor-move 0 (term-rows))
		(term-print (+ "\r" (repeat " " (term-cols)) "\r^b:^w"))
	))
	(var CurrentMode 'VIEW')
	(var ModeViewKeyCallback #Data :: (
		% (print "Livium key:" Data)
		(var Str (to-string Data))
		(var List (split Str ""))
		(map List #Ch :: (
			(if (== CurrentMode 'VIEW') (
				(if (== 58 (index Data 0)) (
					(open_command)
				))
			) (else (
				(call CallCurrentCallback Ch)
			)))
		))
	))
	(var ModeCommandKeyCallback #Data :: (
		% (print "Commandline key:" Data)
		(var Str (to-string Data))
		(var List (split Str ""))
		(term-print Str)
		(map List #Ch :: (
			(if (== Ch "\r") (
				(handle-command CommandBuffer)
				(set CommandBuffer "")
				(set CurrentMode 'VIEW')
				(cursor-restore)
			) (else (
				(set CommandBuffer (+ CommandBuffer Ch))
			)))
		))
	))

	(var CallCurrentCallback nil)

	(def modes_init (scope # :: (
		(var CaseView (case 'VIEW' (scope # :: ((get ModeViewKeyCallback)))))
		(var CaseCommand (case 'COMMAND' (scope # :: (get ModeCommandKeyCallback))))
		(var CaseDefault (default #Value :: (throw (+ "Unknown mode: " Value))))
		(set CallCurrentCallback (scope #Data :: (
			(call (switch CurrentMode (list CaseView CaseCommand CaseDefault)) Data)
		)))

		(var TopKeyCallback (scope #Data :: (
			(call CallCurrentCallback Data)
		)))

		(addKeyCallback TopKeyCallback)
		(commands-init)
	)))
	(export-global modes_init/0)
)
